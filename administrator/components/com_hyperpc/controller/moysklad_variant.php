<?php

/**
 * HYPERPC - The shop of powerful computers.
 *
 * This file is part of the HYPERPC package.
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 *
 * @package     HYPERPC
 * @license     Proprietary
 * @copyright   Proprietary https://hyperpc.ru/license
 * @link        https://github.com/HYPER-PC/HYPERPC".
 *
 * @author      Roman Evsyukov
 */

defined('_JEXEC') or die('Restricted access');

use Joomla\CMS\Router\Route;
use Joomla\CMS\Language\Text;
use Joomla\CMS\Session\Session;
use HYPERPC\Joomla\Controller\ControllerForm;

/**
 * Class HyperPcControllerMoysklad_Variant
 *
 * @since   2.0
 */
class HyperPcControllerMoysklad_Variant extends ControllerForm
{

    /**
     * Hook on initialize controller.
     *
     * @param   array $config
     *
     * @return  void
     *
     * @since   2.0
     *
     * @SuppressWarnings("unused")
     */
    public function initialize(array $config)
    {
        parent::initialize($config);
        $this
            ->registerTask('delete', 'delete')
            ->registerTask('change-state', 'changeState');
    }

    /**
     * Method to cancel on edit.
     *
     * @param   string $key     The name of the primary key of the URL variable.
     *
     * @return  boolean         True if access level checks pass, false otherwise.
     *
     * @since   2.0
     */
    public function cancel($key = null)
    {
        $this->view_item = 'moysklad_part';
        $this->view_list = 'moysklad_part';

        return parent::cancel($key);
    }

    /**
     * Method to save a record.
     *
     * @param   string $key     The name of the primary key of the URL variable.
     * @param   string $urlVar  The name of the URL variable if different from the primary key.
     *
     * @return  boolean         True if successful, false otherwise.
     *
     * @since   2.0
     */
    public function save($key = null, $urlVar = null)
    {
        if ($this->hyper['input']->get('task') === 'save') {
            $this->view_item = 'moysklad_part';
            $this->view_list = 'moysklad_part';
        }

        return parent::save($key, $urlVar); // TODO: Change the autogenerated stub
    }

    /**
     * Delete item
     *
     * @since 2.0
     */
    public function delete()
    {
        //  Check for request forgeries.
        Session::checkToken() or die(Text::_('JINVALID_TOKEN'));

        //  Get items to remove from the request.
        $cid = $this->input->get('cid', [], 'array');

        $ajaxOutput = ['result' => false];
        $isAjax     = $this->hyper['helper']['request']->isAjax();

        /** @var HyperPcModelMoysklad_Variant $model */
        $model = $this->getModel();

        //  Remove the items.
        if ($model->delete($cid)) {
            $this->setMessage(Text::plural($this->text_prefix . '_N_ITEMS_DELETED', count($cid)));
            if ($isAjax) {
                $ajaxOutput['result'] = true;
            }
        } else {
            $this->setMessage($model->getError(), 'error');
        }

        if ($isAjax) {
            $this->hyper['cms']->setHeader('Content-Type', 'application/json');
            $this->hyper['cms']->close(json_encode($ajaxOutput));
        }

        $this->setRedirect(Route::_('index.php?option=' . $this->option . '&view=' . $this->view_list, false));
    }

    /**
     * Change variant state publish/unpublish
     *
     * @throws  Exception
     *
     * @since   2.0
     */
    public function changeState()
    {
        //  Check for request forgeries.
        Session::checkToken() or die(Text::_('JINVALID_TOKEN'));

        //  Get items to remove from the request.
        $cid = $this->input->get('cid', [], 'array');

        $ajaxOutput = ['result' => false];
        $isAjax     = $this->hyper['helper']['request']->isAjax();

        /** @var HyperPcModelMoysklad_Variant $model */
        $model = $this->getModel();

        /** @var HyperPcTableMoysklad_Variants $table */
        $table = $model->getTable();

        try {
            $count = 0;
            foreach ($cid as $id) {
                $variant = $model->getItem($id);
                if ($variant->id > 0) {
                    $value = ($variant->state === HP_STATUS_PUBLISHED) ? HP_STATUS_UNPUBLISHED : HP_STATUS_PUBLISHED;
                    $variant->set('state', $value);
                    if ($table->save($variant->getArray())) {
                        $count++;
                    }
                }
            }

            if ($isAjax) {
                $ajaxOutput['result'] = true;
                $icon = $variant->isPublished() ? 'icon-publish' : 'icon-unpublish';

                $ajaxOutput['icon'] = '<span class="' . $icon . ' icon-white"></span>';
            }

            $msg = ($variant->state === HP_STATUS_PUBLISHED) ? 'JUNPUBLISHED' : 'JPUBLISHED';

            $this->setMessage(Text::sprintf($msg, $count));
        } catch (Exception $e) {
            $this->setMessage($e->getMessage(), 'error');
        }

        if ($isAjax) {
            $this->hyper['cms']->setHeader('Content-Type', 'application/json');
            $this->hyper['cms']->close(json_encode($ajaxOutput));
        }

        $this->setRedirect(Route::_('index.php?option=' . $this->option . '&view=' . $this->view_list, false));
    }

    /**
     * Gets the URL arguments to append to an item redirect.
     *
     * @param   integer $recordId   The primary key id for the item.
     * @param   string  $urlVar     The name of the URL variable for the id.
     *
     * @return  string              The arguments to append to the redirect URL.
     *
     * @since   2.0
     */
    protected function getRedirectToItemAppend($recordId = null, $urlVar = 'id')
    {
        $append = parent::getRedirectToItemAppend($recordId, $urlVar);

        $append .=
            '&id='                . $recordId .
            '&part_id='           . $this->hyper['input']->get('part_id', 0) .
            '&product_folder_id=' . $this->hyper['input']->get('product_folder_id', 0);

        return $append;
    }

    /**
     * Gets the URL arguments to append to a list redirect.
     *
     * @return  string The arguments to append to the redirect URL.
     *
     * @since   2.0
     */
    protected function getRedirectToListAppend()
    {
        $append = parent::getRedirectToListAppend();

        $append .=
            '&id='                . $this->hyper['input']->get('part_id', 0) .
            '&layout=edit'        .
            '&product_folder_id=' . $this->hyper['input']->get('product_folder_id', 0);

        return $append;
    }
}
